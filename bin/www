#!/usr/bin/env node

import app from '../app.js'
import debugLib from 'debug';
import fs from 'fs';
import { createServer } from 'http';
import { exit } from 'process';

const debug = debugLib('translationpage:server');

export const conf = initSettings();

const port = normalizePort(process.env.PORT || conf.port || '29700');

app.set('port', port);

const server = createServer(app);

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

function initSettings() {
  try {
    let confRaw = fs.readFileSync('conf.json', 'utf-8');
    return JSON.parse(confRaw);
  } catch (err) {
    console.error(err);
    exit(1);
  }
}
